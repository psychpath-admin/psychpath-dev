import { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useAuth } from '@/context/AuthContext'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
// import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
import { ChevronLeft, ChevronRight, Eye, Edit, Plus, Trash2, Calendar, Clock, User, FileText, TrendingUp, Target, Award, Filter, X, Search, BarChart3, ChevronDown, ChevronUp } from 'lucide-react'
import { toast } from 'sonner'
import { 
  getSectionAEntries, 
  createSectionAEntry, 
  updateSectionAEntry, 
  deleteSectionAEntry,
  getClientAutocomplete,
  getLastSessionData,
  getCustomActivityTypes,
  createCustomActivityType,
  deleteCustomActivityType
} from '@/lib/api'
import CRAForm from '@/components/CRAForm'
import { minutesToHoursMinutes, formatDurationWithUnit, formatDurationDisplay } from '../utils/durationUtils'
import { useFilterPersistence, useSimpleFilterPersistence } from '@/hooks/useFilterPersistence'
import { useErrorHandler } from '@/lib/errors'

// Helper function to format dates in dd/mm/yyyy format
const formatDateDDMMYYYY = (dateString: string) => {
  const date = new Date(dateString)
  const day = date.getDate().toString().padStart(2, '0')
  const month = (date.getMonth() + 1).toString().padStart(2, '0')
  const year = date.getFullYear()
  return `${day}/${month}/${year}`
}

// Helper function to get entry type label and styling
const getEntryTypeInfo = (entryType: string) => {
  switch (entryType) {
    case 'client_contact':
      return {
        label: 'DCC',
        color: 'bg-blue-100 text-blue-800 border-blue-200',
        description: 'Direct Client Contact'
      }
    case 'cra':
      return {
        label: 'CRA',
        color: 'bg-green-100 text-green-800 border-green-200',
        description: 'Client Related Activity'
      }
    case 'independent_activity':
      return {
        label: 'ICRA',
        color: 'bg-purple-100 text-purple-800 border-purple-200',
        description: 'Independent Client Related Activity'
      }
    default:
      return {
        label: entryType.toUpperCase(),
        color: 'bg-gray-100 text-gray-800 border-gray-200',
        description: entryType
      }
  }
}

interface DCCEntry {
  id: number
  client_id: string
  client_pseudonym?: string
  session_date: string
  week_starting: string
  place_of_practice: string
  presenting_issues: string
  session_activity_types: string[]
  duration_minutes: string
  reflections_on_experience: string
  entry_type: 'client_contact' | 'cra' | 'independent_activity'
  parent_dcc_entry?: number
  cra_entries: DCCEntry[]
  simulated: boolean
  supervisor_reviewed?: boolean
  locked?: boolean
  supervisor_comment?: string
  trainee_response?: string
  simulated_hours_info?: {
    total_hours: number
    remaining_hours: number
    limit_reached: boolean
  }
  total_sessions?: number
  total_duration_minutes?: number
  total_duration_display?: string
  created_at: string
  updated_at: string
}

interface PaginationInfo {
  current_page: number
  total_pages: number
  total_records: number
  records_per_page: number
}

export default function SectionADashboard() {
  const { user } = useAuth()
  const navigate = useNavigate()
  const { showError } = useErrorHandler()
  const [dccEntries, setDccEntries] = useState<DCCEntry[]>([])
  const [allEntries, setAllEntries] = useState<DCCEntry[]>([]) // Store unfiltered entries for cumulative totals
  const [pagination, setPagination] = useState<PaginationInfo>({
    current_page: 1,
    total_pages: 1,
    total_records: 0,
    records_per_page: 10
  })
  const [loading, setLoading] = useState(true)
  const [selectedEntry, setSelectedEntry] = useState<DCCEntry | null>(null)
  const [showEntryForm, setShowEntryForm] = useState(false)
  const [showCRAForm, setShowCRAForm] = useState(false)
  const [showICRAForm, setShowICRAForm] = useState(false)
  const [showSmartForm, setShowSmartForm] = useState(false)
  const [editingEntry, setEditingEntry] = useState(false)
  const [editingCRAId, setEditingCRAId] = useState<number | null>(null)
  const [expandedEntries, setExpandedEntries] = useState<Set<string>>(new Set())
  const [expandedWeeks, setExpandedWeeks] = useState<Set<string>>(new Set())
  
  // Custom activity types state
  const [customActivityTypes, setCustomActivityTypes] = useState<Array<{id: number, name: string}>>([])
  const [newCustomActivityType, setNewCustomActivityType] = useState('')
  
  // Filters state
  const [showFilters, setShowFilters] = useState(false)
  const [craFormData, setCraFormData] = useState({
    client_id: '',
    client_pseudonym: '',
    session_date: '',
    place_of_practice: '',
    presenting_issues: '',
    session_activity_types: [],
    duration_minutes: '50',
    reflections_on_experience: '',
    simulated: false
  })
  const [icraFormData, setIcraFormData] = useState({
    client_id: '',
    client_pseudonym: '',
    session_date: '',
    place_of_practice: '',
    presenting_issues: '',
    session_activity_types: [],
    duration_minutes: '50',
    reflections_on_experience: '',
    simulated: false
  })

  // Smart form state
  const [smartFormData, setSmartFormData] = useState({
    date: new Date().toISOString().split('T')[0],
    client_pseudonym: '',
    place_of_practice: '',
    presenting_issues: '',
    dcc_activity_types: [] as string[],
    description: '',
    duration: 50, // Default 50 minutes
    simulated_client: false,
    supervisor_reviewed: false
  })
  const [clientSuggestions, setClientSuggestions] = useState<string[]>([])
  const [showSuggestions, setShowSuggestions] = useState(false)
  const [formErrors, setFormErrors] = useState<Record<string, string>>({})
  
  // Tooltip toggle
  const [showTooltips, setShowTooltips] = useState(true)
  
  // Persistent filters and sorting
  const [sortBy, setSortBy] = useSimpleFilterPersistence<'newest' | 'oldest' | 'duration' | 'client'>('section-a-sort-by', 'oldest') // Default to oldest first
  const [dateFrom, setDateFrom] = useSimpleFilterPersistence<string>('section-a-date-from', '')
  const [dateTo, setDateTo] = useSimpleFilterPersistence<string>('section-a-date-to', '')
  const [sessionType, setSessionType] = useSimpleFilterPersistence<string>('section-a-session-type', 'all')
  const [durationMin, setDurationMin] = useSimpleFilterPersistence<string>('section-a-duration-min', '')
  const [durationMax, setDurationMax] = useSimpleFilterPersistence<string>('section-a-duration-max', '')
  // Weekly organization is now the standard view - no need for toggle
  const groupByWeek = true
  
  // New Section A-specific filters
  const [clientPseudonym, setClientPseudonym] = useSimpleFilterPersistence<string>('section-a-client-pseudonym', '')
  const [activityType, setActivityType] = useSimpleFilterPersistence<string>('section-a-activity-type', 'all') // 'all', 'DCC', 'CRA', 'ICRA'
  const [reviewedFilter, setReviewedFilter] = useSimpleFilterPersistence<string>('section-a-reviewed-filter', 'all') // 'all', 'reviewed', 'not_reviewed'

  useEffect(() => {
    loadDCCEntries()
  }, [pagination.current_page, pagination.records_per_page, sortBy, dateFrom, dateTo, sessionType, durationMin, durationMax, clientPseudonym, activityType, reviewedFilter])

  // Load custom activity types from localStorage
  useEffect(() => {
    const savedCustomTypes = localStorage.getItem(`customActivityTypes_${user?.id}`)
    if (savedCustomTypes) {
      try {
        setCustomActivityTypes(JSON.parse(savedCustomTypes))
      } catch (error) {
        console.error('Error loading custom activity types:', error)
      }
    }
  }, [user?.id])

  // Save custom activity types to localStorage
  useEffect(() => {
    if (user?.id && customActivityTypes.length > 0) {
      localStorage.setItem(`customActivityTypes_${user.id}`, JSON.stringify(customActivityTypes))
    }
  }, [customActivityTypes, user?.id])

  const loadDCCEntries = async () => {
    setLoading(true)
    try {
      // For now, we'll use the existing API and filter on frontend
      // TODO: Update backend to support pagination and filtering
      const fetchedEntries = await getSectionAEntries({
        include_locked: true
      })
      
      
      // Store unfiltered entries for cumulative totals calculation
      setAllEntries(fetchedEntries)
      
      // Include all Section A entry types (DCC, CRA, ICRA)
      let filteredEntries = fetchedEntries.filter((entry: DCCEntry) => 
        entry.entry_type === 'client_contact' || entry.entry_type === 'cra' || entry.entry_type === 'independent_activity'
      )
      
      // Apply filters
      if (dateFrom) {
        filteredEntries = filteredEntries.filter((entry: DCCEntry) => {
          // Parse dates properly for comparison
          const entryDate = new Date(entry.session_date + 'T00:00:00') // Add time to avoid timezone issues
          const fromDate = new Date(dateFrom + 'T00:00:00')
          return entryDate >= fromDate
        })
      }
      if (dateTo) {
        filteredEntries = filteredEntries.filter((entry: DCCEntry) => {
          // Parse dates properly for comparison
          const entryDate = new Date(entry.session_date + 'T00:00:00') // Add time to avoid timezone issues
          const toDate = new Date(dateTo + 'T23:59:59') // End of day
          return entryDate <= toDate
        })
      }
      if (sessionType && sessionType !== 'all') {
        filteredEntries = filteredEntries.filter((entry: DCCEntry) => 
          entry.session_activity_types.includes(sessionType)
        )
      }
      if (durationMin) {
        filteredEntries = filteredEntries.filter((entry: DCCEntry) => 
          parseInt(entry.duration_minutes) >= parseInt(durationMin)
        )
      }
      if (durationMax) {
        filteredEntries = filteredEntries.filter((entry: DCCEntry) => 
          parseInt(entry.duration_minutes) <= parseInt(durationMax)
        )
      }

      // Client pseudonym filter
      if (clientPseudonym) {
        filteredEntries = filteredEntries.filter((entry: DCCEntry) => 
          entry.client_id.toLowerCase().includes(clientPseudonym.toLowerCase()) ||
          (entry.client_pseudonym && entry.client_pseudonym.toLowerCase().includes(clientPseudonym.toLowerCase()))
        )
      }

      // Activity type filter (DCC, CRA, ICRA)
      if (activityType !== 'all') {
        filteredEntries = filteredEntries.filter((entry: DCCEntry) => {
          if (activityType === 'DCC') return entry.entry_type === 'client_contact'
          if (activityType === 'CRA') return entry.entry_type === 'cra'
          if (activityType === 'ICRA') return entry.entry_type === 'independent_activity'
          return true
        })
      }

      // Supervisor review filter
      if (reviewedFilter === 'reviewed') {
        filteredEntries = filteredEntries.filter((entry: DCCEntry) => entry.supervisor_reviewed)
      }
      if (reviewedFilter === 'not_reviewed') {
        filteredEntries = filteredEntries.filter((entry: DCCEntry) => !entry.supervisor_reviewed)
      }
      
      // Apply sorting
      filteredEntries.sort((a: DCCEntry, b: DCCEntry) => {
        switch (sortBy) {
          case 'newest':
            return new Date(b.session_date).getTime() - new Date(a.session_date).getTime()
          case 'oldest':
            return new Date(a.session_date).getTime() - new Date(b.session_date).getTime()
          case 'duration':
            return parseInt(b.duration_minutes) - parseInt(a.duration_minutes)
          case 'client':
            return a.client_id.localeCompare(b.client_id)
          default:
            return 0
        }
      })
      
      // Apply pagination
      const startIndex = (pagination.current_page - 1) * pagination.records_per_page
      const endIndex = startIndex + pagination.records_per_page
      const paginatedEntries = filteredEntries.slice(startIndex, endIndex)
      
      setDccEntries(paginatedEntries)
      setPagination(prev => ({
        ...prev,
        total_records: filteredEntries.length,
        total_pages: Math.ceil(filteredEntries.length / pagination.records_per_page)
      }))
      
    } catch (error) {
      console.error('Error loading DCC entries:', error)
      setDccEntries([])
    } finally {
      setLoading(false)
    }
  }


  const calculateWeekStarting = (dateString: string) => {
    const date = new Date(dateString)
    
    // Get the day of the week (0=Sunday, 1=Monday, ..., 6=Saturday)
    const dayOfWeek = date.getDay()
    
    let weekStart: Date
    
    if (dayOfWeek === 0) {
      // Sunday belongs to the NEXT week (next Monday)
      weekStart = new Date(date)
      weekStart.setDate(date.getDate() + 1)
    } else {
      // Calculate the Monday of the current week
      const daysToMonday = dayOfWeek - 1 // 1=Monday is 0 days, 2=Tuesday is 1 day, etc.
      weekStart = new Date(date)
      weekStart.setDate(date.getDate() - daysToMonday)
    }
    
    return weekStart.toISOString().split('T')[0]
  }

  const handlePageChange = (page: number) => {
    setPagination(prev => ({ ...prev, current_page: page }))
  }

  const handleRecordsPerPageChange = (recordsPerPage: number) => {
    setPagination(prev => ({ ...prev, records_per_page: recordsPerPage, current_page: 1 }))
  }

  const handleViewDetails = (entry: DCCEntry) => {
    const entryId = entry.id.toString()
    setExpandedEntries(prev => {
      const newSet = new Set(prev)
      if (newSet.has(entryId)) {
        newSet.delete(entryId)
      } else {
        newSet.add(entryId)
      }
      return newSet
    })
  }

  const handleEdit = (entry: DCCEntry) => {
    console.log('Edit button clicked for entry:', entry.id, 'type:', entry.entry_type)
    
    // Check if entry is locked
    if (entry.locked) {
      showError(new Error('Entry is locked'), {
        title: 'Entry Cannot Be Edited',
        category: 'Validation',
        customExplanation: 'This entry is locked and cannot be edited because it is part of an approved logbook. Once a logbook is approved by your supervisor, all entries become read-only to maintain data integrity.',
        customUserAction: 'If you need to make changes to this entry, please contact your supervisor to unlock the logbook first.'
      })
      return
    }
    
    if (entry.entry_type === 'independent_activity') {
      // Edit ICRA entry in CRA form modal
      setSelectedEntry(entry)
      setEditingCRAId(entry.id)
      setIcraFormData({
        client_id: entry.client_id,
        client_pseudonym: entry.client_pseudonym,
        session_date: entry.session_date,
        place_of_practice: entry.place_of_practice || '',
        presenting_issues: entry.presenting_issues || '',
        session_activity_types: entry.session_activity_types || [],
        duration_minutes: entry.duration_minutes?.toString() || '50',
        reflections_on_experience: entry.reflections_on_experience || '',
        simulated: entry.simulated || false
      })
      setShowICRAForm(true)
    } else {
      // Edit DCC entry in separate form
      console.log('Navigating to:', `/section-a/edit/${entry.id}`)
      navigate(`/section-a/edit/${entry.id}`)
    }
  }

  const handleAddCRA = (entry: DCCEntry) => {
    // Check if entry is locked
    if (entry.locked) {
      showError(new Error('Cannot add CRA to locked entry'), {
        title: 'Cannot Add CRA',
        category: 'Validation',
        customExplanation: 'You cannot add a Client Related Activity (CRA) to this entry because it is part of an approved logbook. Once a logbook is approved by your supervisor, all entries become read-only to maintain data integrity.',
        customUserAction: 'If you need to add a CRA to this entry, please contact your supervisor to unlock the logbook first.'
      })
      return
    }
    
    setSelectedEntry(entry)
    setCraFormData({
      client_id: entry.client_id,
      client_pseudonym: entry.client_id, // Default to same as client_id for consistency
      session_date: entry.session_date,
      place_of_practice: '',
      presenting_issues: '',
      session_activity_types: [],
      duration_minutes: '50',
      reflections_on_experience: '',
      simulated: false
    })
    setShowCRAForm(true)
  }

  const handleAddICRA = () => {
    setIcraFormData({
      client_id: '',
      client_pseudonym: '',
      session_date: new Date().toISOString().split('T')[0],
      place_of_practice: '',
      presenting_issues: '',
      session_activity_types: [],
      duration_minutes: '50',
      reflections_on_experience: '',
      simulated: false
    })
    setShowICRAForm(true)
  }

  const handleDelete = async (entry: DCCEntry) => {
    if (window.confirm(`Are you sure you want to delete this DCC record for ${entry.client_id}?`)) {
      try {
        await deleteSectionAEntry(entry.id)
        loadDCCEntries()
      } catch (error) {
        console.error('Error deleting entry:', error)
      }
    }
  }

  const handleEditCRA = (craEntry: DCCEntry, parentEntry?: DCCEntry) => {
    // Check if parent DCC entry is locked
    if (parentEntry?.locked) {
      showError(new Error('CRA entry is locked'), {
        title: 'CRA Cannot Be Edited',
        category: 'Validation',
        customExplanation: 'This CRA entry cannot be edited because its parent DCC entry is locked as part of an approved logbook. Once a logbook is approved by your supervisor, all entries become read-only to maintain data integrity.',
        customUserAction: 'If you need to make changes to this CRA entry, please contact your supervisor to unlock the logbook first.'
      })
      return
    }
    
    setSelectedEntry(craEntry)
    setCraFormData({
      client_id: craEntry.client_id,
      client_pseudonym: craEntry.client_pseudonym || craEntry.client_id,
      session_date: craEntry.session_date,
      place_of_practice: craEntry.place_of_practice || '',
      presenting_issues: craEntry.presenting_issues || '',
      session_activity_types: craEntry.session_activity_types || [],
      duration_minutes: craEntry.duration_minutes?.toString() || '50',
      reflections_on_experience: craEntry.reflections_on_experience || '',
      simulated: craEntry.simulated || false
    })
    setShowCRAForm(true)
  }

  const handleDeleteCRA = async (craEntry: DCCEntry, parentEntry?: DCCEntry) => {
    // Check if parent DCC entry is locked
    if (parentEntry?.locked) {
      showError(new Error('CRA entry is locked'), {
        title: 'CRA Cannot Be Deleted',
        category: 'Validation',
        customExplanation: 'This CRA entry cannot be deleted because its parent DCC entry is locked as part of an approved logbook. Once a logbook is approved by your supervisor, all entries become read-only to maintain data integrity.',
        customUserAction: 'If you need to delete this CRA entry, please contact your supervisor to unlock the logbook first.'
      })
      return
    }
    
    if (window.confirm(`Are you sure you want to delete this CRA record?`)) {
      try {
        await deleteSectionAEntry(craEntry.id)
        loadDCCEntries()
      } catch (error) {
        console.error('Error deleting CRA entry:', error)
      }
    }
  }

  const handleCRAFormSubmit = async (formData: any) => {
    try {
      setLoading(true)
      
      const entryData = {
        ...formData,
        entry_type: 'cra',
        parent_dcc_entry: selectedEntry?.id,
        week_starting: calculateWeekStarting(formData.session_date)
      }

      if (editingCRAId) {
        await updateSectionAEntry(editingCRAId, entryData)
        toast.success('CRA entry updated successfully!')
      } else {
        // Check if this will be converted to ICRA (cross-week scenario)
        const parentWeek = selectedEntry ? calculateWeekStarting(selectedEntry.session_date) : null
        const craWeek = calculateWeekStarting(formData.session_date)
        const willConvertToICRA = parentWeek && parentWeek !== craWeek
        
        if (willConvertToICRA) {
          toast.info('Note: This activity is in a different week than the DCC session, so it will be saved as an Independent Client Related Activity (ICRA) instead of a CRA.')
        }
        
        await createSectionAEntry(entryData)
        toast.success(willConvertToICRA ? 'ICRA entry created successfully!' : 'CRA entry created successfully!')
      }

      setShowCRAForm(false)
      setSelectedEntry(null)
      setEditingCRAId(null)
      setCraFormData({
        client_id: '',
        client_pseudonym: '',
        session_date: '',
        place_of_practice: '',
        presenting_issues: '',
        session_activity_types: [],
        duration_minutes: '50',
        reflections_on_experience: '',
        simulated: false
      })
      loadDCCEntries()
    } catch (error) {
      console.error('Error submitting CRA form:', error)
      toast.error('Failed to save CRA entry. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  const handleICRAFormSubmit = async (formData: any) => {
    try {
      setLoading(true)
      
      const entryData = {
        ...formData,
        entry_type: 'independent_activity', // Backend expects 'independent_activity' for ICRA
        parent_dcc_entry: null, // ICRA entries are independent
        week_starting: calculateWeekStarting(formData.session_date)
      }

      if (editingCRAId) {
        await updateSectionAEntry(editingCRAId, entryData)
        toast.success('ICRA entry updated successfully!')
      } else {
        await createSectionAEntry(entryData)
        toast.success('ICRA entry created successfully!')
      }

      setShowICRAForm(false)
      setSelectedEntry(null)
      setEditingCRAId(null)
      setIcraFormData({
        client_id: '',
        client_pseudonym: '',
        session_date: new Date().toISOString().split('T')[0],
        place_of_practice: '',
        presenting_issues: '',
        session_activity_types: [],
        duration_minutes: '50',
        reflections_on_experience: '',
        simulated: false
      })
      loadDCCEntries()
    } catch (error) {
      console.error('Error submitting ICRA form:', error)
      toast.error('Failed to save ICRA entry. Please try again.')
    } finally {
      setLoading(false)
    }
  }

  const handleAddCustomActivityType = () => {
    if (newCustomActivityType.trim() && !customActivityTypes.some(type => type.name.toLowerCase() === newCustomActivityType.toLowerCase())) {
      const newType = {
        id: Date.now(), // Simple ID generation
        name: newCustomActivityType.trim()
      }
      setCustomActivityTypes([...customActivityTypes, newType])
      setNewCustomActivityType('')
      toast.success(`Added custom activity type: ${newCustomActivityType.trim()}`)
    }
  }

  const handleDeleteCustomActivityType = (id: number) => {
    setCustomActivityTypes(customActivityTypes.filter(type => type.id !== id))
    toast.success('Custom activity type removed')
  }

  const formatDuration = (minutes: string) => {
    return formatDurationDisplay(minutes)
  }

  const truncateText = (text: string, maxLength: number = 100) => {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text
  }

  // Smart form handlers
  const getClientSuggestions = async (query: string) => {
    if (query.length < 2) {
      setClientSuggestions([])
      return
    }
    
    try {
      const entries = await getSectionAEntries()
      const uniqueClients = [...new Set(
        entries
          .filter(entry => 
            entry.client_pseudonym?.toLowerCase().includes(query.toLowerCase()) ||
            entry.client_id?.toLowerCase().includes(query.toLowerCase())
          )
          .map(entry => entry.client_pseudonym || entry.client_id)
      )].filter(Boolean) as string[]
      
      setClientSuggestions(uniqueClients.slice(0, 10))
    } catch (error) {
      console.error('Error fetching client suggestions:', error)
    }
  }

  const handleClientSelect = async (clientPseudonym: string) => {
    try {
      const entries = await getSectionAEntries()
      const lastEntry = entries
        .filter(entry => (entry.client_pseudonym || entry.client_id) === clientPseudonym)
        .sort((a, b) => new Date(b.session_date).getTime() - new Date(a.session_date).getTime())[0]
      
      if (lastEntry) {
        setSmartFormData(prev => ({
          ...prev,
          client_pseudonym: clientPseudonym,
          place_of_practice: lastEntry.place_of_practice || '',
          presenting_issues: lastEntry.presenting_issues || ''
        }))
      } else {
        setSmartFormData(prev => ({
          ...prev,
          client_pseudonym: clientPseudonym
        }))
      }
      setShowSuggestions(false)
    } catch (error) {
      console.error('Error fetching client data:', error)
    }
  }

  const validateSmartForm = () => {
    const errors: Record<string, string> = {}
    
    if (!smartFormData.date) errors.date = 'Date is required'
    if (!smartFormData.client_pseudonym) errors.client_pseudonym = 'Client pseudonym is required'
    if (!smartFormData.place_of_practice) errors.place_of_practice = 'Place of practice is required'
    if (!smartFormData.presenting_issues) errors.presenting_issues = 'Presenting issues are required'
    if (smartFormData.dcc_activity_types.length === 0) errors.dcc_activity_types = 'At least one DCC activity type is required'
    if (!smartFormData.description) errors.description = 'Activity description is required'
    if (smartFormData.duration <= 0) errors.duration = 'Duration must be greater than 0'
    
    // Validation: DCC activities cannot be with simulated clients
    if (smartFormData.simulated_client) {
      errors.simulated_client = 'DCC activities cannot be with simulated clients'
    }
    
    setFormErrors(errors)
    return Object.keys(errors).length === 0
  }

  const handleSmartFormSubmit = async () => {
    if (!validateSmartForm()) {
      toast.error('Please fix the form errors before submitting')
      return
    }

    try {
      const entryData = {
        client_id: smartFormData.client_pseudonym,
        client_pseudonym: smartFormData.client_pseudonym,
        session_date: smartFormData.date,
        place_of_practice: smartFormData.place_of_practice,
        presenting_issues: smartFormData.presenting_issues,
        session_activity_types: smartFormData.dcc_activity_types,
        duration_minutes: smartFormData.duration.toString(),
        reflections_on_experience: smartFormData.description,
        simulated: smartFormData.simulated_client,
        supervisor_reviewed: smartFormData.supervisor_reviewed,
        entry_type: 'client_contact',
        week_starting: calculateWeekStarting(smartFormData.date)
      }

      await createSectionAEntry(entryData)
      
      // Reset form
      setSmartFormData({
        date: new Date().toISOString().split('T')[0],
        client_pseudonym: '',
        place_of_practice: '',
        presenting_issues: '',
        activity_types: [],
        description: '',
        duration: 1.0,
        simulated_client: false,
        supervisor_reviewed: false
      })
      setFormErrors({})
      setShowSmartForm(false)
      loadDCCEntries()
      
      toast.success('Entry saved successfully. Consider logging supervision if applicable.')
    } catch (error) {
      console.error('Error saving entry:', error)
      toast.error('Failed to save entry. Please try again.')
    }
  }

  const clearFilters = () => {
    setDateFrom('')
    setDateTo('')
    setSessionType('all')
    setDurationMin('')
    setDurationMax('')
    setGroupByWeek(false)
    setClientPseudonym('')
    setActivityType('all')
    setReviewedFilter('all')
    setPagination(prev => ({ ...prev, current_page: 1 }))
  }

  const hasActiveFilters = dateFrom || dateTo || (sessionType && sessionType !== 'all') || durationMin || durationMax || clientPseudonym || activityType !== 'all' || reviewedFilter !== 'all'

  const toggleWeekExpansion = (weekStart: string) => {
    setExpandedWeeks(prev => {
      const newSet = new Set(prev)
      if (newSet.has(weekStart)) {
        newSet.delete(weekStart)
      } else {
        newSet.add(weekStart)
      }
      return newSet
    })
  }

  // Group entries by week (standard view)
  const getGroupedEntries = () => {
    const grouped = dccEntries.reduce((groups, entry) => {
      const weekStart = entry.week_starting
      if (!groups[weekStart]) {
        groups[weekStart] = []
      }
      groups[weekStart].push(entry)
      return groups
    }, {} as Record<string, DCCEntry[]>)
    
    // Sort entries within each group based on the current sort order
    const sortEntries = (entries: DCCEntry[]) => {
      switch (sortBy) {
        case 'newest':
          return entries.sort((a, b) => new Date(b.session_date).getTime() - new Date(a.session_date).getTime())
        case 'oldest':
          return entries.sort((a, b) => new Date(a.session_date).getTime() - new Date(b.session_date).getTime())
        case 'duration':
          return entries.sort((a, b) => (parseInt(b.duration_minutes) || 0) - (parseInt(a.duration_minutes) || 0))
        case 'client':
          return entries.sort((a, b) => a.client_id.localeCompare(b.client_id))
        default:
          return entries.sort((a, b) => new Date(b.session_date).getTime() - new Date(a.session_date).getTime())
      }
    }
    
    // Convert to array and sort by week start date based on the selected sort order
    const sortedWeeks = Object.entries(grouped).sort(([a], [b]) => {
      const dateA = new Date(a).getTime()
      const dateB = new Date(b).getTime()
      
      // Apply the same sort logic as entries, but for week groups
      switch (sortBy) {
        case 'newest':
          return dateB - dateA // Newest weeks first
        case 'oldest':
          return dateA - dateB // Oldest weeks first
        case 'duration':
          // For duration, sort by total duration of all entries in the week
          const totalDurationA = grouped[a].reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0)
          const totalDurationB = grouped[b].reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0)
          return totalDurationB - totalDurationA // Longest duration weeks first
        case 'client':
          // For client, sort alphabetically by week start date string
          return a.localeCompare(b)
        default:
          return dateB - dateA // Default to newest first
      }
    })
    
    return sortedWeeks.map(([weekStart, entries]) => ({ 
      weekStart, 
      entries: sortEntries(entries)
    }))
  }

  return (
    <div className="min-h-screen bg-bgSection">
      <div className="container mx-auto px-4 py-8">
        {/* Hero Section - PsychPathway Brand */}
        <div className="mb-8">
          <div className="bg-gradient-to-r from-blue-600 to-blue-600/90 rounded-card p-8 text-white shadow-md">
            <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
              <div>
                <h1 className="text-4xl font-headings mb-2">Section A: Direct Client Contact</h1>
                <p className="text-white/90 text-lg font-body">Track your client interactions and build your professional portfolio</p>
                <div className="flex gap-2 mt-4">
                  <Button
                    onClick={() => window.location.href = '/section-b'}
                    className="px-3 py-2 rounded-md bg-green-600 text-white text-sm hover:bg-green-700"
                  >
                    Open Section B
                  </Button>
                  <Button
                    onClick={() => window.location.href = '/section-c'}
                    className="px-3 py-2 rounded-md bg-purple-600 text-white text-sm hover:bg-purple-700"
                  >
                    Open Section C
                  </Button>
                </div>
              </div>
                  <div className="flex flex-col sm:flex-row gap-3">
                    <Button 
                      onClick={() => setShowSmartForm(true)}
                      size="lg"
                      className="bg-white text-primary hover:bg-white/90 font-semibold shadow-sm rounded-lg"
                    >
                      <Plus className="h-5 w-5 mr-2" />
                      Log DCC Entry
                    </Button>
                    <Button 
                      onClick={() => handleAddICRA()}
                      size="lg"
                      className="bg-white/20 text-white hover:bg-white/30 font-semibold shadow-sm rounded-lg border border-white/30"
                    >
                      <Plus className="h-5 w-5 mr-2" />
                      New ICRA Entry
                    </Button>
                <Button 
                  variant="outline"
                  size="lg"
                  onClick={() => window.location.href = '/logbook'}
                  className="border-white text-white hover:bg-white hover:text-primary font-semibold rounded-lg bg-white/10 backdrop-blur-sm"
                >
                  <BarChart3 className="h-5 w-5 mr-2" />
                  Weekly Logbooks
                </Button>
                  </div>
            </div>
          </div>
        </div>


        {/* Section A Client Hours Compliance Dashboard */}
        {(() => {
          // Calculate hours summary - use ALL entries for cumulative totals, not filtered ones
          let totalDccHours = 0
          let totalCRAHours = 0
          let totalICRAHours = 0
          let simulatedDccHours = 0

          allEntries.forEach(entry => {
            const entryMinutes = parseInt(entry.duration_minutes) || 0
            const entryHours = entryMinutes / 60
            
            if (entry.entry_type === 'client_contact') {
              totalDccHours += entryHours
              if (entry.simulated) {
                simulatedDccHours += entryHours
              }
            } else if (entry.entry_type === 'cra') {
              totalCRAHours += entryHours
            } else if (entry.entry_type === 'independent_activity') {
              totalICRAHours += entryHours
            }

            // Add CRA hours from nested entries
            if (entry.cra_entries) {
              entry.cra_entries.forEach(craEntry => {
                const craMinutes = parseInt(craEntry.duration_minutes) || 0
                const craHours = craMinutes / 60
                totalCRAHours += craHours
              })
            }
          })

          // Mock user profile data - in real implementation, this would come from user profile
          const userProfile = {
            internship_start_date: '2024-01-01', // Mock start date
            internship_weeks_estimate: 52, // 1 year internship
            weekly_clinical_commitment_hours: 26 // 26 hours per week (assume 60% DCC, 40% CRA)
          }

          // Calculate internship progress
          const calculateInternshipProgress = () => {
            const startDate = new Date(userProfile.internship_start_date)
            const currentDate = new Date()
            const weeksElapsed = Math.max(1, Math.ceil((currentDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24 * 7)))
            const progressPercentage = Math.min(weeksElapsed / userProfile.internship_weeks_estimate, 1) * 100 // Convert to percentage
            const expectedDccHours = weeksElapsed * userProfile.weekly_clinical_commitment_hours * 0.6 // 60% DCC
            const expectedCRAHours = weeksElapsed * userProfile.weekly_clinical_commitment_hours * 0.4 // 40% CRA
            return { weeksElapsed, progressPercentage, expectedDccHours, expectedCRAHours }
          }

          const internshipProgress = calculateInternshipProgress()

          // Calculate progress ratios
          const dccProgressRatio = totalDccHours / internshipProgress.expectedDccHours
          const craProgressRatio = totalCRAHours / internshipProgress.expectedCRAHours

          // RAG Status calculation
          const getRAGStatus = (ratio: number) => {
            if (ratio < 0.75) return { status: 'red', label: 'Non-compliant', color: 'text-red-600', bg: 'bg-red-50', border: 'border-red-200' }
            if (ratio < 1) return { status: 'amber', label: 'At Risk', color: 'text-amber-600', bg: 'bg-amber-50', border: 'border-amber-200' }
            return { status: 'green', label: 'On Track', color: 'text-green-600', bg: 'bg-green-50', border: 'border-green-200' }
          }

          const dccRAGStatus = getRAGStatus(dccProgressRatio)
          const craRAGStatus = getRAGStatus(craProgressRatio)

          // Supervisor review tracking
          const reviewedEntries = allEntries.filter(entry => entry.supervisor_reviewed).length
          const reviewPercentage = allEntries.length > 0 ? (reviewedEntries / allEntries.length) * 100 : 0

          return (
            <>
              {/* Tooltip Toggle */}
              <div className="flex justify-end mb-4">
                <div className="flex items-center space-x-2 bg-white/80 backdrop-blur-sm rounded-lg px-4 py-2 shadow-sm border border-gray-200">
                  <span className="text-sm text-gray-600 font-medium">Show Tooltips</span>
                  <button
                    onClick={() => setShowTooltips(!showTooltips)}
                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 ${
                      showTooltips ? 'bg-primary' : 'bg-gray-300'
                    }`}
                  >
                    <span
                      className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                        showTooltips ? 'translate-x-6' : 'translate-x-1'
                      }`}
                    />
                  </button>
                </div>
              </div>

              {/* Compliance Overview Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-6 mb-8">
                {/* Total DCC Logged */}
                <div className="relative group">
                  <Card className={`brand-card hover:shadow-md transition-all duration-300 ${dccRAGStatus.border} ${dccRAGStatus.bg}`}>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="h-12 w-12 bg-primary/10 rounded-full flex items-center justify-center">
                        <Target className="h-6 w-6 text-primary" />
                      </div>
                      <Badge className={`${dccRAGStatus.status === 'green' ? 'bg-green-500' : dccRAGStatus.status === 'amber' ? 'bg-amber-500' : 'bg-red-500'} text-white text-xs font-semibold`}>
                        {dccRAGStatus.label}
                      </Badge>
                    </div>
                    <div className="text-2xl font-bold text-textDark mb-1">
                      {formatDurationWithUnit(totalDccHours * 60)}
                    </div>
                    <div className="text-xs font-semibold text-textDark mb-1 font-body">Total DCC Logged</div>
                    <div className="text-xs text-textLight mb-2">Goal: {(userProfile.internship_weeks_estimate * userProfile.weekly_clinical_commitment_hours * 0.6).toFixed(0)}h total</div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className={`h-2 rounded-full transition-all duration-500 ${dccRAGStatus.status === 'green' ? 'bg-green-500' : dccRAGStatus.status === 'amber' ? 'bg-amber-500' : 'bg-red-500'}`}
                        style={{ width: `${Math.min(dccProgressRatio * 100, 100)}%` }}
                      ></div>
                    </div>
                    <div className="text-xs text-textLight mt-1">
                      {dccProgressRatio >= 1 ? `✓ ${(dccProgressRatio * 100).toFixed(1)}% complete` : `${(dccProgressRatio * 100).toFixed(1)}% of expected`}
                    </div>
                  </CardContent>
                </Card>
                  {/* Tooltip */}
                  <div className={`absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-4 py-3 bg-gray-900 text-white text-sm rounded-lg transition-opacity duration-200 pointer-events-none z-50 w-80 ${showTooltips ? 'opacity-0 group-hover:opacity-100' : 'opacity-0'}`}>
                    <div className="space-y-1">
                      <p className="font-semibold">Direct Client Contact (DCC) Hours</p>
                      <p>Time spent in direct face-to-face or virtual contact with clients for assessment, intervention, or consultation.</p>
                      <p>Target: 60% of your clinical commitment hours. Current status: {dccRAGStatus.label.toLowerCase()}.</p>
                    </div>
                    <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
                  </div>
                </div>

                {/* Total CRA Logged */}
                <div className="relative group">
                  <Card className={`brand-card hover:shadow-md transition-all duration-300 ${craRAGStatus.border} ${craRAGStatus.bg}`}>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="h-12 w-12 bg-secondary/10 rounded-full flex items-center justify-center">
                        <FileText className="h-6 w-6 text-secondary" />
                      </div>
                      <Badge className={`${craRAGStatus.status === 'green' ? 'bg-green-500' : craRAGStatus.status === 'amber' ? 'bg-amber-500' : 'bg-red-500'} text-white text-xs font-semibold`}>
                        {craRAGStatus.label}
                      </Badge>
                    </div>
                    <div className="text-2xl font-bold text-textDark mb-1">
                      {formatDurationWithUnit(totalCRAHours * 60)}
                    </div>
                    <div className="text-xs font-semibold text-textDark mb-1 font-body">Total CRA Logged</div>
                    <div className="text-xs text-textLight mb-2">Goal: {(userProfile.internship_weeks_estimate * userProfile.weekly_clinical_commitment_hours * 0.4).toFixed(0)}h total</div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className={`h-2 rounded-full transition-all duration-500 ${craRAGStatus.status === 'green' ? 'bg-green-500' : craRAGStatus.status === 'amber' ? 'bg-amber-500' : 'bg-red-500'}`}
                        style={{ width: `${Math.min(craProgressRatio * 100, 100)}%` }}
                      ></div>
                    </div>
                    <div className="text-xs text-textLight mt-1">
                      {craProgressRatio >= 1 ? `✓ ${(craProgressRatio * 100).toFixed(1)}% complete` : `${(craProgressRatio * 100).toFixed(1)}% of expected`}
                    </div>
                  </CardContent>
                </Card>
                  {/* Tooltip */}
                  <div className={`absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-4 py-3 bg-gray-900 text-white text-sm rounded-lg transition-opacity duration-200 pointer-events-none z-50 w-80 ${showTooltips ? 'opacity-0 group-hover:opacity-100' : 'opacity-0'}`}>
                    <div className="space-y-1">
                      <p className="font-semibold">Client Related Activities (CRA) Hours</p>
                      <p>Time spent on client-related work outside direct contact, including case notes, report writing, treatment planning, and consultation.</p>
                      <p>Target: 40% of your clinical commitment hours. Current status: {craRAGStatus.label.toLowerCase()}.</p>
                    </div>
                    <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
                  </div>
                </div>

                {/* Total ICRA Logged */}
                <div className="relative group">
                  <Card className="brand-card hover:shadow-md transition-all duration-300">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="h-12 w-12 bg-accent/10 rounded-full flex items-center justify-center">
                        <TrendingUp className="h-6 w-6 text-accent" />
                      </div>
                      <Badge variant="outline" className="text-accent border-accent text-xs font-semibold">
                        ICRA
                      </Badge>
                    </div>
                    <div className="text-2xl font-bold text-textDark mb-1">
                      {formatDurationWithUnit(totalICRAHours * 60)}
                    </div>
                    <div className="text-xs font-semibold text-textDark mb-1 font-body">Total ICRA Logged</div>
                    <div className="text-xs text-textLight mb-2">Independent activities</div>
                    <div className="text-xs text-textLight">
                      {totalICRAHours > 0 ? '✓ Activities logged' : 'No ICRA entries'}
                    </div>
                  </CardContent>
                </Card>
                  {/* Tooltip */}
                  <div className={`absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-4 py-3 bg-gray-900 text-white text-sm rounded-lg transition-opacity duration-200 pointer-events-none z-50 w-80 ${showTooltips ? 'opacity-0 group-hover:opacity-100' : 'opacity-0'}`}>
                    <div className="space-y-1">
                      <p className="font-semibold">Independent Client Related Activities (ICRA)</p>
                      <p>Independent client-related work performed outside supervised practice, including research, case studies, and professional development activities.</p>
                      <p>These activities supplement your supervised practice and contribute to your overall professional development.</p>
                    </div>
                    <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
                  </div>
                </div>

                {/* Expected DCC to Date */}
                <div className="relative group">
                  <Card className="brand-card hover:shadow-md transition-all duration-300">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="h-12 w-12 bg-blue-500/10 rounded-full flex items-center justify-center">
                        <Calendar className="h-6 w-6 text-blue-600" />
                      </div>
                      <Badge variant="outline" className="text-blue-600 border-blue-600 text-xs font-semibold">
                        Expected
                      </Badge>
                    </div>
                    <div className="text-2xl font-bold text-textDark mb-1">
                      {internshipProgress.expectedDccHours.toFixed(0)}h
                    </div>
                    <div className="text-xs font-semibold text-textDark mb-1 font-body">Expected DCC to Date</div>
                    <div className="text-xs text-textLight mb-2">Based on 60% DCC commitment</div>
                    <div className="text-xs text-textLight">
                      {internshipProgress.weeksElapsed} weeks elapsed
                    </div>
                  </CardContent>
                </Card>
                  {/* Tooltip */}
                  <div className={`absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-4 py-3 bg-gray-900 text-white text-sm rounded-lg transition-opacity duration-200 pointer-events-none z-50 w-80 ${showTooltips ? 'opacity-0 group-hover:opacity-100' : 'opacity-0'}`}>
                    <div className="space-y-1">
                      <p className="font-semibold">Expected DCC Hours to Date</p>
                      <p>Calculated based on your internship start date, weekly clinical commitment, and the 60% DCC allocation.</p>
                      <p>Formula: {internshipProgress.weeksElapsed} weeks × {userProfile.weekly_clinical_commitment_hours} hours/week × 60% = {internshipProgress.expectedDccHours.toFixed(0)} hours</p>
                    </div>
                    <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
                  </div>
                </div>

                {/* Expected CRA to Date */}
                <div className="relative group">
                  <Card className="brand-card hover:shadow-md transition-all duration-300">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="h-12 w-12 bg-purple-500/10 rounded-full flex items-center justify-center">
                        <Calendar className="h-6 w-6 text-purple-600" />
                      </div>
                      <Badge variant="outline" className="text-purple-600 border-purple-600 text-xs font-semibold">
                        Expected
                      </Badge>
                    </div>
                    <div className="text-2xl font-bold text-textDark mb-1">
                      {internshipProgress.expectedCRAHours.toFixed(0)}h
                    </div>
                    <div className="text-xs font-semibold text-textDark mb-1 font-body">Expected CRA to Date</div>
                    <div className="text-xs text-textLight mb-2">Based on 40% CRA commitment</div>
                    <div className="text-xs text-textLight">
                      {internshipProgress.weeksElapsed} weeks elapsed
                    </div>
                  </CardContent>
                </Card>
                  {/* Tooltip */}
                  <div className={`absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-4 py-3 bg-gray-900 text-white text-sm rounded-lg transition-opacity duration-200 pointer-events-none z-50 w-80 ${showTooltips ? 'opacity-0 group-hover:opacity-100' : 'opacity-0'}`}>
                    <div className="space-y-1">
                      <p className="font-semibold">Expected CRA Hours to Date</p>
                      <p>Calculated based on your internship start date, weekly clinical commitment, and the 40% CRA allocation.</p>
                      <p>Formula: {internshipProgress.weeksElapsed} weeks × {userProfile.weekly_clinical_commitment_hours} hours/week × 40% = {internshipProgress.expectedCRAHours.toFixed(0)} hours</p>
                    </div>
                    <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
                  </div>
                </div>

                {/* Supervisor Reviews */}
                <div className="relative group">
                  <Card className="brand-card hover:shadow-md transition-all duration-300">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="h-12 w-12 bg-green-500/10 rounded-full flex items-center justify-center">
                        <Eye className="h-6 w-6 text-green-600" />
                      </div>
                      <Badge variant="outline" className="text-green-600 border-green-600 text-xs font-semibold">
                        {reviewPercentage.toFixed(0)}%
                      </Badge>
                    </div>
                    <div className="text-2xl font-bold text-textDark mb-1">
                      {reviewedEntries}/{allEntries.length}
                    </div>
                    <div className="text-xs font-semibold text-textDark mb-1 font-body">Supervisor Reviews</div>
                    <div className="text-xs text-textLight mb-2">Target: ≥75% reviewed</div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className={`h-2 rounded-full transition-all duration-500 ${reviewPercentage >= 75 ? 'bg-green-500' : reviewPercentage >= 50 ? 'bg-amber-500' : 'bg-red-500'}`}
                        style={{ width: `${Math.min(reviewPercentage, 100)}%` }}
                      ></div>
                    </div>
                    <div className="text-xs text-textLight mt-1">
                      {reviewPercentage >= 75 ? '✓ Target met' : `${(75 - reviewPercentage).toFixed(1)}% to target`}
                    </div>
                  </CardContent>
                </Card>
                  {/* Tooltip */}
                  <div className={`absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-4 py-3 bg-gray-900 text-white text-sm rounded-lg transition-opacity duration-200 pointer-events-none z-50 w-80 ${showTooltips ? 'opacity-0 group-hover:opacity-100' : 'opacity-0'}`}>
                    <div className="space-y-1">
                      <p className="font-semibold">Supervisor Review Progress</p>
                      <p>Tracks how many of your Section A entries have been reviewed by your supervisor.</p>
                      <p>Target: At least 75% of entries should be reviewed. Current: {reviewPercentage.toFixed(1)}% reviewed ({reviewedEntries} of {allEntries.length} entries).</p>
                    </div>
                    <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
                  </div>
                </div>
                </div>

              {/* Compliance Summary */}
              <div className="bg-bgCard p-6 rounded-lg border border-border mb-8">
                <h3 className="text-lg font-semibold text-textDark mb-4 font-headings">Section A Compliance Summary</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <div className={`w-3 h-3 rounded-full ${dccRAGStatus.status === 'green' ? 'bg-green-500' : dccRAGStatus.status === 'amber' ? 'bg-amber-500' : 'bg-red-500'}`}></div>
                      <span className="font-medium">DCC Hours: {formatDurationWithUnit(totalDccHours * 60)} / {internshipProgress.expectedDccHours.toFixed(0)}h expected</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className={`w-3 h-3 rounded-full ${craRAGStatus.status === 'green' ? 'bg-green-500' : craRAGStatus.status === 'amber' ? 'bg-amber-500' : 'bg-red-500'}`}></div>
                      <span className="font-medium">CRA Hours: {formatDurationWithUnit(totalCRAHours * 60)} / {internshipProgress.expectedCRAHours.toFixed(0)}h expected</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className={`w-3 h-3 rounded-full ${reviewPercentage >= 75 ? 'bg-green-500' : reviewPercentage >= 50 ? 'bg-amber-500' : 'bg-red-500'}`}></div>
                      <span className="font-medium">Supervisor Reviews: {reviewPercentage.toFixed(1)}% (Target: ≥75%)</span>
                    </div>
                  </div>
                  <div className="space-y-2">
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                      <span className="font-medium">Internship Progress: {internshipProgress.weeksElapsed} weeks ({internshipProgress.progressPercentage.toFixed(0)}%)</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                      <span className="font-medium">ICRA Activities: {formatDurationWithUnit(totalICRAHours * 60)} logged</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                      <span className="font-medium">Simulated DCC: {formatDurationWithUnit(simulatedDccHours * 60)} of {formatDurationWithUnit(totalDccHours * 60)}</span>
                    </div>
                  </div>
                </div>
                
                {/* Legend */}
                <div className="mt-4 pt-4 border-t border-border">
                  <div className="flex items-center gap-6 text-xs">
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-green-500"></div>
                      <span className="text-textLight">On Track / Compliant</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-amber-500"></div>
                      <span className="text-textLight">At Risk (75-99%)</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-red-500"></div>
                      <span className="text-textLight">Non-Compliant (&lt;75%)</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                      <span className="text-textLight">Informational</span>
                    </div>
                  </div>
                </div>
              </div>
            </>
          )
        })()}

        {/* Enhanced Filters and Controls */}
        <div className="flex flex-col md:flex-row gap-3 mb-4">
        </div>
        {/* Quick Stats Cards */}
        {(() => {
          const totalEntries = dccEntries.length
          const totalMinutes = dccEntries.reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0)
          const totalHours = totalMinutes / 60
          const uniqueClients = new Set(dccEntries.map(entry => entry.client_id)).size
          const simulatedMinutes = dccEntries.filter(entry => entry.simulated).reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0)
          const simulatedHours = simulatedMinutes / 60

          return (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              <Card className="brand-card hover:shadow-md transition-all duration-300">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="brand-label">Total Entries</p>
                      <p className="text-3xl font-bold text-primary">{totalEntries}</p>
                    </div>
                    <div className="h-12 w-12 bg-primary/10 rounded-full flex items-center justify-center">
                      <FileText className="h-6 w-6 text-primary" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="brand-card hover:shadow-md transition-all duration-300">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="brand-label">Total Hours</p>
                      <p className="text-3xl font-bold text-secondary">{formatDurationWithUnit(totalMinutes)}</p>
                    </div>
                    <div className="h-12 w-12 bg-secondary/10 rounded-full flex items-center justify-center">
                      <Clock className="h-6 w-6 text-secondary" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="brand-card hover:shadow-md transition-all duration-300">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="brand-label">Unique Clients</p>
                      <p className="text-3xl font-bold text-accent">{uniqueClients}</p>
                    </div>
                    <div className="h-12 w-12 bg-accent/10 rounded-full flex items-center justify-center">
                      <User className="h-6 w-6 text-accent" />
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="brand-card hover:shadow-md transition-all duration-300">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="brand-label">Simulated Hours</p>
                      <p className="text-3xl font-bold text-primary">{formatDurationWithUnit(simulatedMinutes)}</p>
                    </div>
                    <div className="h-12 w-12 bg-primary/10 rounded-full flex items-center justify-center">
                      <Target className="h-6 w-6 text-primary" />
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          )
        })()}

        <Card className="mb-8 brand-card">
          <CardHeader className="pb-4">
            <div className="flex flex-wrap items-center justify-between gap-4">
              <div className="flex items-center gap-3">
                <div className="h-8 w-8 bg-primary/10 rounded-lg flex items-center justify-center">
                  <Filter className="h-4 w-4 text-primary" />
                </div>
                <div>
                  <CardTitle className="text-xl font-headings text-textDark">Filters & Search</CardTitle>
                  <p className="text-sm text-textLight font-body">Refine your DCC entries</p>
                </div>
              </div>
              <div className="flex gap-2">
                <Button 
                  onClick={() => setShowFilters(!showFilters)} 
                  variant="outline" 
                  size="sm"
                  className="text-primary border-primary/20 hover:bg-primary/5"
                >
                  {showFilters ? (
                    <>
                      <ChevronUp className="h-4 w-4 mr-2" />
                      Hide Filters
                    </>
                  ) : (
                    <>
                      <ChevronDown className="h-4 w-4 mr-2" />
                      Show Filters
                    </>
                  )}
                </Button>
                {hasActiveFilters && (
                  <Button onClick={clearFilters} variant="outline" size="sm" className="text-red-600 border-red-200 hover:bg-red-50">
                    <X className="h-4 w-4 mr-2" />
                    Clear All
                  </Button>
                )}
              </div>
            </div>
            
            {/* Quick Filter Chips */}
            <div className="mt-4 flex flex-wrap gap-2">
              {hasActiveFilters && (
                <>
                  {dateFrom && (
                    <Badge variant="secondary" className="bg-primary/10 text-primary">
                      From: {formatDateDDMMYYYY(dateFrom)}
                      <button onClick={() => setDateFrom('')} className="ml-2 hover:bg-primary/20 rounded-full p-0.5">
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  )}
                  {dateTo && (
                    <Badge variant="secondary" className="bg-primary/10 text-primary">
                      To: {formatDateDDMMYYYY(dateTo)}
                      <button onClick={() => setDateTo('')} className="ml-2 hover:bg-primary/20 rounded-full p-0.5">
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  )}
                  {sessionType && sessionType !== 'all' && (
                    <Badge variant="secondary" className="bg-secondary/10 text-secondary">
                      Type: {sessionType.replace('_', ' ')}
                      <button onClick={() => setSessionType('all')} className="ml-2 hover:bg-secondary/20 rounded-full p-0.5">
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  )}
                  {(durationMin || durationMax) && (
                    <Badge variant="secondary" className="bg-accent/10 text-accent">
                      Duration: {durationMin || '0'} - {durationMax || '∞'} min
                      <button onClick={() => { setDurationMin(''); setDurationMax('') }} className="ml-2 hover:bg-accent/20 rounded-full p-0.5">
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  )}
                  {clientPseudonym && (
                    <Badge variant="secondary" className="bg-secondary/10 text-secondary">
                      Client: {clientPseudonym}
                      <button onClick={() => setClientPseudonym('')} className="ml-2 hover:bg-secondary/20 rounded-full p-0.5">
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  )}
                  {activityType !== 'all' && (
                    <Badge variant="secondary" className="bg-accent/10 text-accent">
                      Type: {activityType}
                      <button onClick={() => setActivityType('all')} className="ml-2 hover:bg-accent/20 rounded-full p-0.5">
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  )}
                  {reviewedFilter !== 'all' && (
                    <Badge variant="secondary" className="bg-blue-500/10 text-blue-600">
                      Review: {reviewedFilter === 'reviewed' ? 'Reviewed' : 'Not Reviewed'}
                      <button onClick={() => setReviewedFilter('all')} className="ml-2 hover:bg-blue-500/20 rounded-full p-0.5">
                        <X className="h-3 w-3" />
                      </button>
                    </Badge>
                  )}
                </>
              )}
            </div>
          </CardHeader>
          {showFilters && (
            <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
              {/* Date Range */}
              <div>
                <label className="block text-sm font-medium mb-1">Date From</label>
                <Input
                  type="date"
                  value={dateFrom}
                  onChange={(e) => setDateFrom(e.target.value)}
                  placeholder="Start date"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Date To</label>
                <Input
                  type="date"
                  value={dateTo}
                  onChange={(e) => setDateTo(e.target.value)}
                  placeholder="End date"
                />
              </div>
              
              {/* Client Pseudonym */}
              <div>
                <label className="block text-sm font-medium mb-1">Client Pseudonym</label>
                <Input
                  type="text"
                  value={clientPseudonym}
                  onChange={(e) => setClientPseudonym(e.target.value)}
                  placeholder="Search by client..."
                />
              </div>
              
              {/* Activity Type */}
              <div>
                <label className="block text-sm font-medium mb-1">Activity Type</label>
                <Select value={activityType} onValueChange={setActivityType}>
                  <SelectTrigger>
                    <SelectValue placeholder="All types" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All types</SelectItem>
                    <SelectItem value="DCC">Direct Client Contact</SelectItem>
                    <SelectItem value="CRA">Client Related Activity</SelectItem>
                    <SelectItem value="ICRA">Independent CRA</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Additional filters */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
              {/* Session Type */}
              <div>
                <label className="block text-sm font-medium mb-1">Session Type</label>
                <Select value={sessionType} onValueChange={setSessionType}>
                  <SelectTrigger>
                    <SelectValue placeholder="All types" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All types</SelectItem>
                    <SelectItem value="psychological_assessment">Psychological Assessment</SelectItem>
                    <SelectItem value="intervention">Intervention</SelectItem>
                    <SelectItem value="prevention">Prevention</SelectItem>
                    <SelectItem value="evaluation">Evaluation</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              {/* Duration Range */}
              <div>
                <label className="block text-sm font-medium mb-1">Duration (min)</label>
                <div className="flex gap-1">
                  <Input
                    type="number"
                    value={durationMin}
                    onChange={(e) => setDurationMin(e.target.value)}
                    placeholder="Min"
                    className="flex-1"
                  />
                  <Input
                    type="number"
                    value={durationMax}
                    onChange={(e) => setDurationMax(e.target.value)}
                    placeholder="Max"
                    className="flex-1"
                  />
                </div>
              </div>

              {/* Supervisor Review Filter */}
              <div>
                <label className="block text-sm font-medium mb-1">Supervisor Review</label>
                <Select value={reviewedFilter} onValueChange={setReviewedFilter}>
                  <SelectTrigger>
                    <SelectValue placeholder="All entries" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All entries</SelectItem>
                    <SelectItem value="reviewed">Reviewed only</SelectItem>
                    <SelectItem value="not_reviewed">Not reviewed</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            
            {/* Sort and Pagination Controls */}
            <div className="flex flex-wrap items-center justify-between gap-4">
              <div className="flex items-center gap-4">
                <div className="flex items-center gap-2">
                  <label className="text-sm font-medium">Sort by:</label>
                  <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>
                    <SelectTrigger className="w-48">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="newest">Newest to Oldest</SelectItem>
                      <SelectItem value="oldest">Oldest to Newest</SelectItem>
                      <SelectItem value="duration">Duration (Longest to Shortest)</SelectItem>
                      <SelectItem value="client">Client Pseudonym (A-Z)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
              </div>
              
              <div className="flex items-center gap-2">
                <label className="text-sm font-medium">Records per page:</label>
                <Select 
                  value={pagination.records_per_page?.toString() || '10'} 
                  onValueChange={(value) => handleRecordsPerPageChange(parseInt(value))}
                >
                  <SelectTrigger className="w-20">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="5">5</SelectItem>
                    <SelectItem value="10">10</SelectItem>
                    <SelectItem value="25">25</SelectItem>
                    <SelectItem value="50">50</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>
            </CardContent>
          )}
        </Card>

        {/* Enhanced DCC Cards */}
        {loading ? (
          <Card className="brand-card">
            <CardContent className="flex flex-col items-center justify-center py-16">
              <div className="relative">
                <div className="animate-spin rounded-full h-16 w-16 border-4 border-primary/20"></div>
                <div className="animate-spin rounded-full h-16 w-16 border-4 border-primary border-t-transparent absolute top-0 left-0"></div>
              </div>
              <h3 className="text-xl font-semibold text-textDark mt-6 mb-2 font-body">Loading your entries...</h3>
              <p className="text-textLight text-center font-body">Fetching your Direct Client Contact records</p>
            </CardContent>
          </Card>
        ) : dccEntries.length === 0 ? (
          <Card className="brand-card">
            <CardContent className="flex flex-col items-center justify-center py-16">
              <div className="h-24 w-24 bg-primary/10 rounded-full flex items-center justify-center mb-6">
                <FileText className="h-12 w-12 text-primary" />
              </div>
              <h3 className="text-2xl font-bold text-textDark mb-3 font-headings">
                {hasActiveFilters ? "No matching records found" : "No DCC Records Yet"}
              </h3>
              <p className="text-textLight text-center mb-8 max-w-md font-body">
                {hasActiveFilters 
                  ? "No records match your current filters. Try adjusting your search criteria or clear filters to see all entries."
                  : "Start building your professional portfolio by creating your first Direct Client Contact entry."
                }
              </p>
              <div className="flex flex-col sm:flex-row gap-3">
                <Button 
                  onClick={() => navigate('/section-a/create')}
                  size="lg"
                  className="brand-button-primary px-8"
                >
                  <Plus className="h-5 w-5 mr-2" />
                  Create Your First DCC Entry
                </Button>
                {hasActiveFilters && (
                  <Button 
                    onClick={clearFilters}
                    variant="outline"
                    size="lg"
                    className="border-border text-textDark hover:bg-bgSection rounded-lg"
                  >
                    <X className="h-5 w-5 mr-2" />
                    Clear Filters
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        ) : (
          <div className="space-y-4">
            {getGroupedEntries().map((group, groupIndex) => {
              return (
                <div key={group.weekStart} className="space-y-4">
                  {/* Week Header */}
                  <div 
                    className="bg-primary/5 border border-primary/20 rounded-lg p-4 cursor-pointer hover:bg-primary/10 transition-colors duration-200"
                    onClick={() => toggleWeekExpansion(group.weekStart)}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <Calendar className="h-5 w-5 text-primary" />
                        <div>
                          <h3 className="text-lg font-semibold text-primary">
                            Week Starting {formatDateDDMMYYYY(group.weekStart)}
                          </h3>
                          <p className="text-sm text-primary/70">
                            {group.entries.length} {group.entries.length === 1 ? 'entry' : 'entries'}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        {/* Weekly Totals */}
                        <div className="flex gap-4 text-sm font-medium">
                          <span className="text-blue-600">
                            DCC {group.entries
                              .filter(entry => entry.entry_type === 'client_contact')
                              .reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0) / 60 < 1 
                              ? `${Math.round(group.entries
                                  .filter(entry => entry.entry_type === 'client_contact')
                                  .reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0))}m`
                              : `${(group.entries
                                  .filter(entry => entry.entry_type === 'client_contact')
                                  .reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0) / 60).toFixed(1)}h`}
                          </span>
                          <span className="text-green-600">
                            CRA {group.entries
                              .filter(entry => entry.entry_type === 'cra')
                              .reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0) / 60 < 1 
                              ? `${Math.round(group.entries
                                  .filter(entry => entry.entry_type === 'cra')
                                  .reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0))}m`
                              : `${(group.entries
                                  .filter(entry => entry.entry_type === 'cra')
                                  .reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0) / 60).toFixed(1)}h`}
                          </span>
                          <span className="text-purple-600">
                            ICRA {group.entries
                              .filter(entry => entry.entry_type === 'independent_activity')
                              .reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0) / 60 < 1 
                              ? `${Math.round(group.entries
                                  .filter(entry => entry.entry_type === 'independent_activity')
                                  .reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0))}m`
                              : `${(group.entries
                                  .filter(entry => entry.entry_type === 'independent_activity')
                                  .reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0) / 60).toFixed(1)}h`}
                          </span>
                          <span className="text-gray-600 font-semibold">
                            Total {(group.entries.reduce((sum, entry) => sum + (parseInt(entry.duration_minutes) || 0), 0) / 60).toFixed(1)}h
                          </span>
                        </div>
                        
                        <ChevronUp 
                          className={`h-4 w-4 text-primary transition-transform duration-200 ${
                            expandedWeeks.has(group.weekStart) ? 'rotate-180' : ''
                          }`} 
                        />
                      </div>
                    </div>
                  </div>
                  
                  {/* Weekly Entries */}
                  {expandedWeeks.has(group.weekStart) && (
                    <div className="space-y-3">
                      {group.entries.map((entry, entryIndex) => {
                        // Create vibrant color variations using PsychPathway brand colors
                        const colorVariations = [
                          'bg-blue-50 border-blue-200 hover:border-blue-300',
                          'bg-amber-50 border-amber-200 hover:border-amber-300', 
                          'bg-orange-50 border-orange-200 hover:border-orange-300',
                          'bg-green-50 border-green-200 hover:border-green-300',
                          'bg-purple-50 border-purple-200 hover:border-purple-300',
                          'bg-pink-50 border-pink-200 hover:border-pink-300',
                          'bg-indigo-50 border-indigo-200 hover:border-indigo-300',
                          'bg-teal-50 border-teal-200 hover:border-teal-300',
                          'bg-rose-50 border-rose-200 hover:border-rose-300',
                          'bg-cyan-50 border-cyan-200 hover:border-cyan-300'
                        ]
                        const cardColorClass = colorVariations[entryIndex % colorVariations.length]
                        
                        return (
                          <Card key={entry.id} className={`hover:shadow-md transition-all duration-300 relative shadow-sm group rounded-card ${cardColorClass}`}>
                            {/* Enhanced Action buttons */}
                            <div className="absolute top-4 right-4 flex gap-1 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleViewDetails(entry)}
                                title={expandedEntries.has(entry.id.toString()) ? "Collapse Details" : "Expand Details"}
                                className="h-9 w-9 p-0 bg-bgCard/95 backdrop-blur-sm shadow-sm hover:shadow-md border-border rounded-lg"
                              >
                                {expandedEntries.has(entry.id.toString()) ? (
                                  <ChevronUp className="h-4 w-4 text-textDark" />
                                ) : (
                                  <ChevronDown className="h-4 w-4 text-textDark" />
                                )}
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleEdit(entry)}
                                title={entry.locked ? "Locked - Cannot Edit" : "Edit"}
                                disabled={entry.locked}
                                className={`h-9 w-9 p-0 bg-bgCard/95 backdrop-blur-sm shadow-sm hover:shadow-md border-border rounded-lg ${
                                  entry.locked ? 'opacity-50 cursor-not-allowed' : ''
                                }`}
                              >
                                <Edit className="h-4 w-4 text-textDark" />
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleAddCRA(entry)}
                                title={entry.locked ? "Locked - Cannot Add CRA" : "Add CRA"}
                                disabled={entry.locked}
                                className={`h-9 w-9 p-0 bg-bgCard/95 backdrop-blur-sm shadow-sm hover:shadow-md border-border rounded-lg ${
                                  entry.locked ? 'opacity-50 cursor-not-allowed' : ''
                                }`}
                              >
                                <Plus className="h-4 w-4 text-textDark" />
                              </Button>
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleDelete(entry)}
                                title={entry.locked ? "Locked - Cannot Delete" : "Delete"}
                                disabled={entry.locked}
                                className={`h-9 w-9 p-0 text-accent hover:text-accent hover:bg-accent/10 bg-bgCard/95 backdrop-blur-sm shadow-sm hover:shadow-md border-accent/20 rounded-lg ${
                                  entry.locked ? 'opacity-50 cursor-not-allowed' : ''
                                }`}
                              >
                                <Trash2 className="h-4 w-4" />
                              </Button>
                            </div>

                            <CardContent className="p-4 pr-32">
                              {/* Entry Type and Status Identification */}
                              <div className="mb-3 flex gap-2 flex-wrap">
                                {(() => {
                                  const typeInfo = getEntryTypeInfo(entry.entry_type)
                                  return (
                                    <Badge className={`${typeInfo.color} font-semibold`}>
                                      {typeInfo.label} - {typeInfo.description}
                                    </Badge>
                                  )
                                })()}
                                {entry.locked && (
                                  <Badge className="bg-red-100 text-red-800 border-red-200 font-semibold">
                                    🔒 Locked
                                  </Badge>
                                )}
                              </div>
                              
                              <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-3">
                                {/* Row 1: Basic Info */}
                                <div className="flex items-center gap-2">
                                  <Calendar className="h-4 w-4 text-gray-500 flex-shrink-0" />
                                  <span className="text-sm font-medium text-gray-700 break-words">
                                    {formatDateDDMMYYYY(entry.session_date)}
                                  </span>
                                </div>
                                
                                <div className="flex items-center gap-2">
                                  <User className="h-4 w-4 text-gray-500 flex-shrink-0" />
                                  <span className="font-semibold text-gray-900 break-words">{entry.client_pseudonym || entry.client_id}</span>
                                </div>
                                
                                <div className="flex items-center gap-2">
                                  <Clock className="h-4 w-4 text-gray-500 flex-shrink-0" />
                                  <span className="text-sm font-medium text-gray-700">
                                    {formatDuration(parseInt(entry.duration_minutes) || 0)}
                                  </span>
                                </div>
                                
                                {/* Row 2: Location and Activity */}
                                <div className="flex items-center gap-2">
                                  <Target className="h-4 w-4 text-gray-500 flex-shrink-0" />
                                  <span className="text-sm text-gray-700 break-words">
                                    {entry.place_of_practice}
                                  </span>
                                </div>
                                
                                <div className="flex flex-wrap gap-1 md:col-span-2">
                                  {entry.session_activity_types.map((type, typeIndex) => (
                                    <Badge key={typeIndex} variant="outline" className="text-xs">
                                      {type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                                    </Badge>
                                  ))}
                                </div>
                                
                                {/* Row 3: Issues and Reflection */}
                                {entry.presenting_issues && (
                                  <div className="md:col-span-2">
                                    <p className="text-xs text-textDark break-words font-medium">
                                      <strong>Issues:</strong> {truncateText(entry.presenting_issues, 80)}
                                    </p>
                                  </div>
                                )}
                                
                                {entry.reflections_on_experience && (
                                  <div className="md:col-span-2">
                                    <p className="text-xs text-textLight italic break-words">
                                      "{truncateText(entry.reflections_on_experience, 100)}"
                                    </p>
                                  </div>
                                )}
                              </div>
                              
                              {/* CRA Entries */}
                              {entry.cra_entries && entry.cra_entries.length > 0 && (
                                <div className="mt-4 border-t pt-4">
                                  <div className="flex items-center gap-2 mb-3">
                                    <Plus className="h-4 w-4 text-green-600" />
                                    <span className="text-sm font-semibold text-green-700">Client Related Activities ({entry.cra_entries.length})</span>
                                  </div>
                                  <div className="space-y-2">
                                    {entry.cra_entries.map((craEntry, craIndex) => (
                                      <Card key={craEntry.id} className="bg-green-50 border-green-200 hover:border-green-300 transition-all duration-300">
                                        {/* CRA Action buttons */}
                                        <div className="absolute top-2 right-2 flex gap-1 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={() => handleEditCRA(craEntry, entry)}
                                            title={entry.locked ? "Locked - Cannot Edit CRA" : "Edit CRA"}
                                            disabled={entry.locked}
                                            className={`h-6 w-6 p-0 bg-white/90 backdrop-blur-sm ${
                                              entry.locked ? 'opacity-50 cursor-not-allowed' : ''
                                            }`}
                                          >
                                            <Edit className="h-3 w-3" />
                                          </Button>
                                          <Button
                                            size="sm"
                                            variant="outline"
                                            onClick={() => handleDeleteCRA(craEntry, entry)}
                                            title={entry.locked ? "Locked - Cannot Delete CRA" : "Delete CRA"}
                                            disabled={entry.locked}
                                            className={`h-6 w-6 p-0 text-red-600 hover:text-red-700 bg-white/90 backdrop-blur-sm ${
                                              entry.locked ? 'opacity-50 cursor-not-allowed' : ''
                                            }`}
                                          >
                                            <Trash2 className="h-3 w-3" />
                                          </Button>
                                        </div>
                                        
                                        <CardContent className="p-3 pr-16">
                                          {/* CRA Entry Type and Status Identification */}
                                          <div className="mb-2 flex gap-2 flex-wrap">
                                            <Badge className="bg-green-100 text-green-800 border-green-200 font-semibold text-xs">
                                              CRA - Client Related Activity
                                            </Badge>
                                            {entry.locked && (
                                              <Badge className="bg-red-100 text-red-800 border-red-200 font-semibold text-xs">
                                                🔒 Locked
                                              </Badge>
                                            )}
                                          </div>
                                          
                                          <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-xs">
                                            <div className="flex items-center gap-1">
                                              <Calendar className="h-3 w-3 text-gray-500" />
                                              <span className="font-medium text-gray-700">
                                                {formatDateDDMMYYYY(craEntry.session_date)}
                                              </span>
                                            </div>
                                            
                                            <div className="flex items-center gap-1">
                                              <Clock className="h-3 w-3 text-gray-500" />
                                              <span className="font-medium text-gray-700">
                                                {formatDuration(parseInt(craEntry.duration_minutes) || 0)}
                                              </span>
                                            </div>
                                            
                                            <div className="flex items-center gap-1">
                                              <User className="h-3 w-3 text-gray-500" />
                                              <span className="font-medium text-gray-700 break-words">
                                                {craEntry.client_pseudonym || craEntry.client_id}
                                              </span>
                                            </div>
                                            
                                            <div className="flex flex-wrap gap-1 md:col-span-2">
                                              {craEntry.session_activity_types.map((type, typeIndex) => (
                                                <Badge key={typeIndex} variant="outline" className="text-xs">
                                                  {type.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                                                </Badge>
                                              ))}
                                            </div>
                                            
                                            <div className="md:col-span-2">
                                              <span className="text-xs text-textLight font-medium">
                                                {craEntry.place_of_practice}
                                              </span>
                                            </div>
                                            
                                            {craEntry.presenting_issues && (
                                              <div className="md:col-span-2">
                                                <p className="text-xs text-textDark break-words font-medium">
                                                  {truncateText(craEntry.presenting_issues, 80)}
                                                </p>
                                              </div>
                                            )}
                                            
                                            {craEntry.reflections_on_experience && (
                                              <div className="md:col-span-2">
                                                <p className="text-xs text-textLight italic break-words">
                                                  "{truncateText(craEntry.reflections_on_experience, 100)}"
                                                </p>
                                              </div>
                                            )}
                                          </div>
                                        </CardContent>
                                      </Card>
                                    )
                                  })}
                                </div>
                              </div>
                            )}
                            </CardContent>
                          </Card>
                        )
                      })}
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        ) : (
          <div className="text-center py-8">
            <p className="text-gray-500">No entries found for the selected criteria.</p>
          </div>
        )}
        </div>
      )}
    </div>
  )
}
