"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv(dotenv_path=Path(__file__).resolve().parent.parent / '.env')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'dev-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', '1') == '1'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 2 * 1024 * 1024  # 2MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'detailed': {
            'format': '{levelname} {asctime} {name} {process:d} {thread:d} {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
        },
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/support_errors.log',
            'formatter': 'detailed',
        },
    },
    'loggers': {
        'psychpath.support': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'psychpath.audit': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'psychpath.app': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,0.0.0.0,testserver').split(',')
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:5173',
    'http://localhost:5174', 
    'http://localhost:5175',
    'http://127.0.0.1:5173',
    'http://127.0.0.1:5174',
    'http://127.0.0.1:5175',
    'http://0.0.0.0:5173',
    'http://0.0.0.0:5174',
    'http://0.0.0.0:5175',
]


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'channels',
    # Local
    'registrar_logbook', # Registrar program logbook app (must be before api)
    'registrar_aope', # Registrar AoPE program app
    'cpd_portfolio', # CPD Portfolio for all psychologists
    'competency_tracking', # Universal competency tracking for all user types
    'progress_reports', # Universal progress reports for all trainee types
    'api',
    'logbook_app',
    'section_a',
    'section_b',
    'section_c',
    'supervision_agenda', # Private trainee-only supervision agenda
    'support',
    'internship_validation', # Added internship validation app
]

# Strong password hashers: prefer Argon2
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.ScryptPasswordHasher',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql'),
        'NAME': os.getenv('DB_NAME', 'psychpath'),
        'USER': os.getenv('DB_USER', 'psychpath'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'psychpath'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': int(os.getenv('DB_PORT', '5432')),
    }
}

# PostgreSQL ONLY - No SQLite fallback to prevent data loss
# The system must use PostgreSQL for data persistence


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Australia/Melbourne'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# REST Framework basic config
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

# CORS (open for dev)
CORS_ALLOW_ALL_ORIGINS = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Role-based annual PD requirements (hours)
PD_ANNUAL_REQUIREMENTS = {
    'INTERN': float(os.getenv('PD_ANNUAL_INTERN', '60')),      # Provisional/Intern
    'REGISTRAR': float(os.getenv('PD_ANNUAL_REGISTRAR', '40')),
}

# Annual PD requirements by role
PROVISIONAL_PD_ANNUAL_HOURS_REQUIRED = 60
REGISTRAR_PD_ANNUAL_HOURS_REQUIRED = 40

# Role-specific program requirements
PROGRAM_REQUIREMENTS = {
    '5+1': {
        'total_hours': 1500,
        'dcc_hours': 500,
        'max_simulated_dcc_hours': 60,
        'supervision_hours': 80,
        'pd_hours': 60,
        'min_weeks': 44,
        'weekly_commitment_guideline': 17.5,
    },
    'registrar': {
        'qualifications': {
            'MASTERS': {
                'duration_weeks': 88,
                'practice_hours': 3000,
                'supervision_hours': 80,
                'pd_hours': 80,
            },
            'COMBINED': {
                'duration_weeks': 66,
                'practice_hours': 2250,
                'supervision_hours': 60,
                'pd_hours': 60,
            },
            'DOCTORATE': {
                'duration_weeks': 44,
                'practice_hours': 1500,
                'supervision_hours': 40,
                'pd_hours': 40,
            },
            'SECOND_AOPE': {
                'duration_weeks': 66,
                'practice_hours': 2250,
                'supervision_hours': 60,
                'pd_hours': 60,
            },
        }
    },
    'registrar_aope': {
        'tracks': {
            'TRACK_1': {'duration_years': 2, 'supervision_hours': 80, 'cpd_hours': 30},
            'TRACK_2': {'duration_years': 3, 'supervision_hours': 120, 'cpd_hours': 45},
            'TRACK_3': {'duration_years': 4, 'supervision_hours': 160, 'cpd_hours': 60},
        },
        'supervision_rules': {
            'short_session_max_hours': 10,
            'short_session_threshold_minutes': 60,
            'principal_min_percentage': 50.0,
            'individual_min_percentage': 66.6,
        },
        'observation': {
            'frequency_days': 180,
            'warning_days': 150,
        }
    }
}

# Channels Configuration
ASGI_APPLICATION = 'config.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}
