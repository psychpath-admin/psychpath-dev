# Generated by Django 5.1.2 on 2025-10-18 23:33

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('logbook_app', '0010_add_missing_workflow_fields'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='logbookauditlog',
            name='metadata',
            field=models.JSONField(blank=True, default=dict, help_text='Additional structured information'),
        ),
        migrations.AddField(
            model_name='logbookauditlog',
            name='target_id',
            field=models.CharField(blank=True, help_text='ID of entry or message if applicable', max_length=100),
        ),
        migrations.AddField(
            model_name='logbookauditlog',
            name='user_role',
            field=models.CharField(choices=[('supervisor', 'Supervisor'), ('provisional', 'Provisional Psychologist'), ('registrar', 'Registrar Psychologist'), ('org_admin', 'Organization Admin'), ('system', 'System')], default='provisional', max_length=20),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='competencies_referenced',
            field=models.JSONField(blank=True, default=list, help_text="List of competency codes (C1-C8) referenced in this week's activities"),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='cumulative_simulated_hours',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Cumulative simulated hours to date', max_digits=6),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='practice_approved_at',
            field=models.DateTimeField(blank=True, help_text='When supervisor approved the practice hours', null=True),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='practice_supervisor_approved',
            field=models.BooleanField(default=False, help_text='Whether supervisor has approved the practice hours for this week'),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='practice_type',
            field=models.CharField(blank=True, choices=[('DIRECT_REAL', 'Direct Real Client Contact'), ('DIRECT_SIMULATED', 'Direct Simulated Client Contact'), ('CLIENT_RELATED', 'Client-Related Activities'), ('INDEPENDENT_CLIENT_RELATED', 'Independent Client-Related Activities')], help_text='Primary practice type for this week (Provisional 5+1 program)', max_length=30, null=True),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='reflection_text',
            field=models.TextField(blank=True, help_text='Mandatory reflection for direct_real and direct_simulated practice types'),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='review_started_at',
            field=models.DateTimeField(blank=True, help_text='When supervisor started reviewing this logbook', null=True),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='section_a_entry_ids',
            field=models.JSONField(default=list, help_text='List of Section A entry IDs'),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='section_b_entry_ids',
            field=models.JSONField(default=list, help_text='List of Section B entry IDs'),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='section_c_entry_ids',
            field=models.JSONField(default=list, help_text='List of Section C entry IDs'),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='simulated_hours',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Simulated skills training hours for this week (max 60 total for 5+1 program)', max_digits=5),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='supervisor_decision_at',
            field=models.DateTimeField(blank=True, help_text='When supervisor made final decision (approve/reject)', null=True),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='week_number',
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AlterField(
            model_name='logbookauditlog',
            name='action',
            field=models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('submitted', 'Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('unlocked', 'Unlocked'), ('locked', 'Locked'), ('resubmitted', 'Resubmitted'), ('message_sent', 'Message Sent'), ('entry_edited', 'Entry Edited'), ('comment_added', 'Comment Added'), ('comment_replied', 'Comment Replied'), ('comment_edited', 'Comment Edited'), ('comment_deleted', 'Comment Deleted'), ('comment_viewed', 'Comment Viewed'), ('response_added', 'Response Added'), ('unlock_requested', 'Unlock Requested'), ('unlock_approved', 'Unlock Approved'), ('unlock_denied', 'Unlock Denied'), ('unlock_activated', 'Unlock Activated'), ('unlock_expired', 'Unlock Expired'), ('unlock_force_relocked', 'Unlock Force Re-locked'), ('notification_sent', 'Notification Sent')], max_length=25),
        ),
        migrations.AlterField(
            model_name='weeklylogbook',
            name='trainee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logbooks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='CommentThread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_id', models.CharField(blank=True, help_text='Entry ID if this is an entry-specific thread', max_length=100, null=True)),
                ('entry_section', models.CharField(blank=True, help_text='Section (A, B, C) if entry-specific', max_length=20, null=True)),
                ('thread_type', models.CharField(choices=[('general', 'General Logbook Comment'), ('entry', 'Entry-Specific Comment')], default='general', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('logbook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_threads', to='logbook_app.weeklylogbook')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_role', models.CharField(choices=[('supervisor', 'Supervisor'), ('provisional', 'Provisional Psychologist'), ('registrar', 'Registrar Psychologist'), ('org_admin', 'Organization Admin')], max_length=20)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('locked', models.BooleanField(default=False, help_text='True once viewed by the other party')),
                ('seen_by', models.JSONField(default=list, help_text='User IDs who have viewed this comment')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='logbook_app.commentmessage')),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='logbook_app.commentthread')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='LogbookMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_role', models.CharField(choices=[('supervisor', 'Supervisor'), ('provisional', 'Provisional Psychologist'), ('registrar', 'Registrar Psychologist'), ('org_admin', 'Organization Admin')], max_length=20)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('logbook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='logbook_app.weeklylogbook')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='LogbookReviewRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('review_started_at', models.DateTimeField(blank=True, null=True)),
                ('review_completed_at', models.DateTimeField(blank=True, null=True)),
                ('supervisor_notes', models.TextField(blank=True, help_text='Internal notes for supervisor')),
                ('logbook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_requests', to='logbook_app.weeklylogbook')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('logbook_submitted', 'Logbook Submitted'), ('logbook_status_updated', 'Logbook Status Updated'), ('comment_added', 'Comment Added'), ('unlock_requested', 'Unlock Requested'), ('unlock_approved', 'Unlock Approved'), ('unlock_denied', 'Unlock Denied'), ('unlock_expiry_warning', 'Unlock Expiry Warning'), ('supervision_invite_pending', 'Supervision Invite Pending'), ('system_message', 'System Message')], max_length=30)),
                ('payload', models.JSONField(default=dict, help_text='Additional data for the notification')),
                ('read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UnlockRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for requesting unlock')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('requested_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('unlock_expires_at', models.DateTimeField(blank=True, help_text='When the unlock expires (if approved)', null=True)),
                ('manually_relocked', models.BooleanField(default=False, help_text='Whether the logbook was manually relocked before expiration')),
                ('supervisor_response', models.TextField(blank=True, help_text="Supervisor's response to the unlock request")),
                ('logbook', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlock_requests', to='logbook_app.weeklylogbook')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlock_requests', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_unlock_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-requested_at'],
            },
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'read', '-created_at'], name='logbook_app_user_id_50c0f6_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type'], name='logbook_app_notific_a01c09_idx'),
        ),
    ]
