# Generated by Django 5.1.2 on 2025-10-07 07:25

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('logbook_app', '0014_auto_20251007_1428'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommentMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_role', models.CharField(choices=[('supervisor', 'Supervisor'), ('provisional', 'Provisional Psychologist'), ('registrar', 'Registrar Psychologist'), ('org_admin', 'Organization Admin')], max_length=20)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('locked', models.BooleanField(default=False, help_text='True once viewed by the other party')),
                ('seen_by', models.JSONField(default=list, help_text='User IDs who have viewed this comment')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentThread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_id', models.CharField(blank=True, help_text='Entry ID if this is an entry-specific thread', max_length=100, null=True)),
                ('entry_section', models.CharField(blank=True, help_text='Section (A, B, C) if entry-specific', max_length=20, null=True)),
                ('thread_type', models.CharField(choices=[('general', 'General Logbook Comment'), ('entry', 'Entry-Specific Comment')], default='general', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='LogbookMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_role', models.CharField(choices=[('supervisor', 'Supervisor'), ('provisional', 'Provisional Psychologist'), ('registrar', 'Registrar Psychologist'), ('org_admin', 'Organization Admin')], max_length=20)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='UnlockRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requester_role', models.CharField(choices=[('supervisor', 'Supervisor'), ('provisional', 'Provisional Psychologist'), ('registrar', 'Registrar Psychologist'), ('org_admin', 'Organization Admin')], max_length=20)),
                ('reason', models.TextField(help_text='Reason for requesting unlock')),
                ('target_section', models.CharField(blank=True, help_text='Specific section or entry ID if applicable', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('reviewer_role', models.CharField(blank=True, choices=[('org_admin', 'Organization Admin'), ('supervisor', 'Supervisor')], max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('admin_comment', models.TextField(blank=True, help_text='Comment from reviewer')),
                ('unlock_expires_at', models.DateTimeField(blank=True, help_text='When the unlock expires', null=True)),
                ('duration_minutes', models.IntegerField(blank=True, help_text='Duration of unlock in minutes', null=True)),
                ('manually_relocked', models.BooleanField(default=False, help_text='Whether manually re-locked before expiry')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.RemoveField(
            model_name='craentry',
            name='logbook',
        ),
        migrations.RemoveField(
            model_name='dccentry',
            name='logbook',
        ),
        migrations.RemoveField(
            model_name='pdentry',
            name='logbook',
        ),
        migrations.RemoveField(
            model_name='supentry',
            name='logbook',
        ),
        migrations.RenameIndex(
            model_name='notification',
            new_name='logbook_app_recipie_31c241_idx',
            old_name='logbook_app_recipient_idx',
        ),
        migrations.RenameIndex(
            model_name='notification',
            new_name='logbook_app_type_7af6cf_idx',
            old_name='logbook_app_type_idx',
        ),
        migrations.RemoveField(
            model_name='weeklylogbook',
            name='supervisor_comments',
        ),
        migrations.AddField(
            model_name='logbookauditlog',
            name='metadata',
            field=models.JSONField(blank=True, default=dict, help_text='Additional structured information'),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='rejected_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='resubmitted_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='returned_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='review_comments',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='role_type',
            field=models.CharField(choices=[('Provisional', 'Provisional'), ('Registrar', 'Registrar')], default='Provisional', max_length=20),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='section_a_entry_ids',
            field=models.JSONField(default=list, help_text='List of Section A entry IDs'),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='section_b_entry_ids',
            field=models.JSONField(default=list, help_text='List of Section B entry IDs'),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='section_c_entry_ids',
            field=models.JSONField(default=list, help_text='List of Section C entry IDs'),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='supervisor_decision_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='weeklylogbook',
            name='week_number',
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.AlterField(
            model_name='logbookauditlog',
            name='action',
            field=models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('submitted', 'Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('returned_for_edits', 'Returned for Edits'), ('resubmitted', 'Resubmitted'), ('unlocked', 'Unlocked'), ('locked', 'Locked'), ('message_sent', 'Message Sent'), ('entry_edited', 'Entry Edited'), ('comment_added', 'Comment Added'), ('comment_replied', 'Comment Replied'), ('comment_edited', 'Comment Edited'), ('comment_deleted', 'Comment Deleted'), ('comment_viewed', 'Comment Viewed'), ('response_added', 'Response Added'), ('unlock_requested', 'Unlock Requested'), ('unlock_approved', 'Unlock Approved'), ('unlock_denied', 'Unlock Denied'), ('unlock_activated', 'Unlock Activated'), ('unlock_expired', 'Unlock Expired'), ('unlock_force_relocked', 'Unlock Force Re-locked'), ('notification_sent', 'Notification Sent')], max_length=25),
        ),
        migrations.AlterField(
            model_name='notification',
            name='type',
            field=models.CharField(choices=[('logbook_submission', 'Logbook Submission'), ('logbook_approved', 'Logbook Approved'), ('logbook_rejected', 'Logbook Rejected'), ('logbook_returned', 'Logbook Returned for Edits'), ('supervision_invite', 'Supervision Invitation'), ('supervision_accepted', 'Supervision Accepted'), ('supervision_rejected', 'Supervision Rejected'), ('system_alert', 'System Alert')], max_length=50),
        ),
        migrations.AlterField(
            model_name='weeklylogbook',
            name='trainee',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logbooks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='commentmessage',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='commentmessage',
            name='reply_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='logbook_app.commentmessage'),
        ),
        migrations.AddField(
            model_name='commentthread',
            name='logbook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_threads', to='logbook_app.weeklylogbook'),
        ),
        migrations.AddField(
            model_name='commentmessage',
            name='thread',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='logbook_app.commentthread'),
        ),
        migrations.AddField(
            model_name='logbookmessage',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='logbookmessage',
            name='logbook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='logbook_app.weeklylogbook'),
        ),
        migrations.AddField(
            model_name='unlockrequest',
            name='logbook',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlock_requests', to='logbook_app.weeklylogbook'),
        ),
        migrations.AddField(
            model_name='unlockrequest',
            name='requester',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unlock_requests_made', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='unlockrequest',
            name='reviewed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unlock_requests_reviewed', to=settings.AUTH_USER_MODEL),
        ),
        migrations.DeleteModel(
            name='CRAEntry',
        ),
        migrations.DeleteModel(
            name='DCCEntry',
        ),
        migrations.DeleteModel(
            name='PDEntry',
        ),
        migrations.DeleteModel(
            name='SUPEntry',
        ),
        migrations.AlterUniqueTogether(
            name='unlockrequest',
            unique_together={('logbook', 'status')},
        ),
    ]
